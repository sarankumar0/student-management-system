// models/Course.js
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

// --- Lesson Sub-Schema ---
const lessonSchema = new Schema({
    title: { // Generated by AI, editable by Admin
        type: String,
        required: [true, 'Lesson title is required.'],
        trim: true
    },
    order: { // To maintain sequence within a module
        type: Number,
        required: true
    },
    contentType: { // Suggested by AI ('text' or 'video'), confirmed by Admin
        type: String,
        required: true,
        enum: ['text', 'video']
    },
    // Text content: AI provides summary/points, Admin writes full content
    textContent: {
        type: String,
        trim: true,
        default: '' // Start empty or with AI summary
    },
    // Video URL: Admin finds and adds the actual YouTube URL
    videoUrl: {
        type: String,
        trim: true,
        default: null // Null until admin adds it
    },
    // AI provides suggestion/topic, Admin might use this for search or replace with own description
    videoDescription: {
        type: String,
        trim: true,
        default: ''
    },
    // Optional: Estimated duration (maybe AI can suggest?)
    // durationMinutes: { type: Number }
}, { _id: true }); // Give lessons their own ID

// --- Module Sub-Schema ---
const moduleSchema = new Schema({
    title: { // Generated by AI, editable by Admin
        type: String,
        required: [true, 'Module title is required.'],
        trim: true
    },
    order: { // To maintain sequence of modules
        type: Number,
        required: true
    },
    lessons: { // Array of Lesson sub-documents
        type: [lessonSchema],
        default: []
    }
}, { _id: true }); // Give modules their own ID

// --- Main Course Schema ---
const courseSchema = new Schema({
    title: { // Generated by AI, editable by Admin
        type: String,
        required: [true, 'Course title is required.'],
        trim: true,
        maxlength: [250, 'Title cannot be more than 250 characters.']
    },
    description: { // Generated by AI, editable by Admin
        type: String,
        trim: true,
        default: ''
    },
    accessType: { // Set by Admin before final save
        type: String,
        required: [true, 'Access type (plan) is required.'],
        enum: {
            values: ['basic', 'classic', 'pro'],
            message: 'Access type must be basic, classic, or pro.'
        },
        index: true
    },
    status: { // Controlled by Admin
        type: String,
        enum: ['draft', 'published'],
        default: 'draft', // Start as draft
        index: true
    },
    modules: { // Array of Module sub-documents
        type: [moduleSchema],
        default: []
    },
    // Reference to the Admin user who initiated/saved it
    createdBy: {
        type: Schema.Types.ObjectId,
        ref: 'User', 
        // required: true // Make required once auth is fully integrated
    },
    // Optional: Store the initial prompt topic for reference
    // initialTopic: { type: String }
    thumbnailUrl: {
        type: String,
        trim: true,
        default: '/uploads/course_thumbnails/default_course.png' // Optional default image path
    },

}, { timestamps: true }); 

// Index for potential searches
courseSchema.index({ title: 'text', description: 'text' });

module.exports = mongoose.model('Course', courseSchema);